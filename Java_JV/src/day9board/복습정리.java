package day9board;

 class 복습정리 {
/* 자바 - 객체지향 프로그램 언어 : OOP
 * 현실정보(객체) => 추상화과정 => 클래스를 정의
 * 정의된 클래스를 이용하여 코드를 작성
 * -추상화	: 
 * -캡슐화 	: 핵심코드가 있기 때문에 핵심코드를 알면 기능
 * -상속		: 자식클래스가 있으면 부모 클래스를 물려받음 + 기능추가
 */
	/* 클래스
	 * - 매소드		: 기능
	 * - 멤버변수		: 정보
	 * - 생성자		: 정보를 초기화
	 */
	/* 접근제어자 class 클래스명{
	 * 맴버변수 : 접근제어자 자료형 변수명
	 * 메소드	 : 접근제어자 리턴타입 매소드명(매개변수){ 구현;
	 * 생성자	 : public 주로 대부분 사용클래스명(매개변수){ 초기화;
	 */
	
	/* 멤버변수 = 자동으로 각 자료형에 맞는 기본값으로 초기화 진행 
	 * 특징 : 같은 클래스(클래스 또는 생성자) + 안에서 자유롭게 사용가능. 단, 특수예외상황
	 * 다은 클래스에서는 인스턴스를 생성해서 호출. 단, 접근제어자에 따라 달라질 수 있음 
	 */
	
	/* 매소드(수행할 일을 잘 알려줘야 한다.)
	 * 기능		:
	 * 매개변수 	: 매소드를 실행하기 위해 필요한 정보 
	 * 			=> 구현되지 않을 코드는 필요없음으로 삭제, 꼭 필요한 정보만 입력
	 * 리턴타입 	: 매소드 실행 후 돌려줘야 하는 값들의 타입 return + '' 뒤쪽부분 확인
	 * 매소드명 	: 카멜표기법 EX)student + count => stydentCount
	 * 장점		: 구조를 파악하기 쉬워짐 
	 * 			  잘만든 매소드는 재사용을 통해서 코드의 중복을 제거
	 * 
	 * 오버로딩	: 이름이 같은 매소드가 2개 이상인 경우
	 * 조건  		: 매개변수가 다른경우
	 * 			  1. 매개변수의 개수가 다른경우
	 * 			  2. 매개변수의 타입이 다른경우
	 * 			: 기능은 같은데 매개변수가 다른경우에 같이 쓰기 위해 <문자열주의>
	 */

	/* 가변 매개변수 매소드
	 * 매개변수의 개수가 고정이 아님
	 * 자료형 ... 변수명으로 사용
	 * 매소드 안에서는 배열처럼 사용
	 */
	
	/* 생성자
	 *  - 이름이 클래스명이다
	 *  - 매소드는 원하는 시점에서 호출가능. 
	 *  - 생성자는 new를 통해 객체를 생성할 때만 호출할 수 있다.
	 *  - 클래스에 생성자가 1개도 없으면 기본 생성자가 자동으로 추가
	 *  - 멤버변수를 초기화
	 */
	
	/* 접근제어자
	 * 1. private		: 해당 클래스
	 * 2. default		: 생략 - 해당클래스 + 같은 패키지
	 * 3. protected		: 상속 - 해당클래스 + 같은 패키지 + 자식 클래스
	 * 4. public		: - 해당클래스 + 같은 패키지 + 다른 패키지 => 모두, 아무나 사용가능 
	 * 
	 * 멤버변수 	: 대부분 	private (고정상수 : public)
	 * 매소드		: 		public 	(같은 클래스에서 다른 메소드에서만 사용되고, 밖에서는 사용될 필요가 없는 매소드 : private)
	 * 생성자		: 		public	(싱글톤 : private, 어디에서 사용하든 인스턴스는 1개)
	 */
}
